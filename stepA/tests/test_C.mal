(def! fun
    (fn* (K & remain)
        (println K)
        (println remain)
    )
)

(print-string "TEST 1\n")
(fun "hello world" 1 2 3 4 5)

(print-string "TEST 2\n")
(try*
    (fun "hello world")
    (catch* X (println X))
)

(print-string "TEST 3\n")
(try*
    (fun "hello world" 1)
    (catch* X (println X))
)

(print-string "TEST 4\n")
(try*
    (do
        (def! fun2
            (fn* (K & remain remain2)
                (println K)
                (println remain)
            )
        )
        (fun2 "hello world" 1)
    )
    (catch* X (println X))
)

(print-string "TEST 5\n")
(try*
    (do
        (def! fun3
            (fn* (K &)
                (println K)
            )
        )
        (fun3 "hello world" 1)
    )
    (catch* X (println X))
)

(print-string "TEST 6\n")
(defmacro! my-cond (& x)
    (if (empty? x) 
        ''()
        `(if ~(car (car x))
            ~(car (cdr (car x)))
            (my-cond ~@(cdr x))
        )
    )
)
; Similar to "cond"
(println (my-cond ; The difinition
    (false 1)
    (true 5)
    (false 3)
    (true 2)
))

(println (my-cond ('t 1)))

"test_C end"