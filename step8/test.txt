(define sum (lambda (x all) (if (empty? x) all (sum (cdr x) (+ all (car x))))))
(sum (list 1 2 3) 0)
(begin (begin (+ 1 2) (* 3 4)) (begin (+ 5 6) (* 7 8)))

(define sqr (lambda (x) (* x x)))
(sqr 50)

((lambda (x y) (+ (* x x) (* y y))) 2 6)
((lambda () (+ (* 2 2) (* 3 3))))

(define f (lambda () (print "hello\n\"world")))

(f)

(eval (list + 1 2 3))

(define lst (quote (b c)))

(quasiquote (a lst d))
(quasiquote (a (unquote lst) d))
(quasiquote ((splice-unquote lst) d))
(quasiquote (a (splice-unquote lst) d))

`(a lst d)
`(a ~lst d)
`(~@ lst d)
`(a ~@lst d)

(define-macro infix (a opr b) (opr a b))
(infix 1 + 2)
(infix (infix 3 * 4) + (infix 2 * 3))


((lambda (x all) (if (empty? x) all (apply-self (cdr x) (+ all (car x))))) (list 1 2 3 4 5) 0)