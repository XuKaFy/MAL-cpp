user> (load-file "tests/test_C.mal") 
EVAL LAMBDA
    BODY<((eval (translate-from-string (read-file x))))>
    ARGS<(x)>
    GIVEN<("tests/test_C.mal")>
TEST 1
EVAL LAMBDA
    BODY<((println K) (println remain))>
    ARGS<(K & remain)>
    GIVEN<("hello world" 1 2 3 4 5)>
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<("hello world")>
"hello world"
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<((1 2 3 4 5))>
(1 2 3 4 5)
TEST 2
EVAL LAMBDA
    BODY<((println K) (println remain))>
    ARGS<(K & remain)>
    GIVEN<("hello world")>
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<("hello world")>
"hello world"
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<(())>
()
TEST 3
EVAL LAMBDA
    BODY<((println K) (println remain))>
    ARGS<(K & remain)>
    GIVEN<("hello world" 1)>
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<("hello world")>
"hello world"
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<((1))>
(1)
TEST 4
EVAL LAMBDA
    BODY<((println K) (println remain))>
    ARGS<(K & remain remain2)>
    GIVEN<("hello world" 1)>
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<("SINGLE: Not single arg")>
"SINGLE: Not single arg"
TEST 5
EVAL LAMBDA
    BODY<((println K))>
    ARGS<(K &)>
    GIVEN<("hello world" 1)>
EVAL LAMBDA
    BODY<((print x) (newline))>
    ARGS<(x)>
    GIVEN<("SINGLE: Not single arg")>
"SINGLE: Not single arg"
TEST 6
EVAL LAMBDA
    BODY<((if (empty? x) (quote (quote ())) (quasiquote (if (unquote (car (car x))) (unquote (car (cdr (car x)))) (my-cond (splice-unquote (cdr x)))))))>
    ARGS<(& x)>
    GIVEN<((false 1) (true 2))>
EVAL LAMBDA
    BODY<((if (empty? x) (quote (quote ())) (quasiquote (if (unquote (car (car x))) (unquote (car (cdr (car x)))) (my-cond (splice-unquote (cdr x)))))))>
    ARGS<(& x)>
    GIVEN<((true 2))>
Evaluator::funQuasiquote: args of quasiquote error