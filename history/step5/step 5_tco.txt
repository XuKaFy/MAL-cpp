第五步中的尾递归优化需要：

	1. 在Evaluator::eval中添加循环优化
	2. 能从内层代码执行的funBegin中跳回上一层eval
	3. 知道某个eval是某个Environment下的最后一句语句

1. 直接在eval函数中加一个goto即可
2. 在C++中，使用try-catch机制，在funBegin中若尝试执行最后一个eval，那么throw，并且在eval中catch
3. 如果一个eval调用是最后一个语句，那么他必满足以下要求：
	a. 它本身最外层的最后一个语句，例如(print "hello world") (+ 1 2)中的(+ 1 2)
	b. 它是最外层分支语句的某个分支，例如(if (quote t) (+ 1 2) (* 3 4))中的(+ 1 2)和(* 3 4)
	c. 按照ab的判断，它是最内层的最后一个语句，并且他也是每个外层的最后一个语句
	   例如(print "hello world") (if (quote t) (+ 1 2) (* 3 4))中的(+ 1 2)和(* 3 4)
	   或者(if (quote t) (if (quote t) (+ 1 2) (* 3 4)) (+ 5 6))中的(+ 1 2)和(* 3 4)和(+ 5 6)

由于我们并不维护ListType的father是谁，所以我们逆向操作，每次进入eval时记录这个eval本身有没有可能是尾递归。
具体案例见tco_example.bmp

注：上述分支结构特指：

	if（funIf）
	cond（funCond，最终触发throw的是funIf2函数）

顺序结构特指：

	let（funLet）
	begin（funBegin）
	lambda （evalLambda，funLambda是lambda的生成函数）

这五个函数可以触发throw (AbstractType*, Environment*)。



补充：对于分支结构来说，最后一个可以尾递归到上一层，那这是不是代表其他分支不能尾递归到自己呢？答案是否定的。

所以，eval多带两个参数fco和root，表示有没有可能是尾递归，和是不是最外层。我们只要让非最后分支“假装”自己是最外层，就可以实现内层尾递归到分支层了。