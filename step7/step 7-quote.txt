第七步需要实现

	(quote ...)：返回本身，不执行
	(quasiquote ...)：返回自身的同时，执行unquote、splice-unquote修饰的部分

		这两个函数只在quasiquote中在使用，在其他部分不定义	
		(unquote ...)：作为值返回
		(splice-unquoted ...)：将返回值“嵌入”上一层结果。注意：参数必须是ListType*
	
			splice-unquoted在代码实现中用throw ListType* 回到上一层。由于这么操作会改变列表结构，所以要拷贝一份。

	(cons ... ...)：将第一个列表的最后一位指向第二个列表
	(concat ...)：合并字符串

	以下将会延缓实现
	(apply-self ...)：用于在匿名函数中调用自身

		如何实现apply-self呢？我们认为自身表示最靠近内层的非buildin的lambda函数。比如说：

		((lambda (x all) (if (empty? x) all (apply-self (cdr x) (+ all (car x))))) (list 1 2 3 4 5) 0)

		这里的(apply-self ...)就是指代该lambda本身。

	这里是和并发相关的部分，延缓实现
	(atom ...)：创建一个原子
	(atom? ...)：是否是原子
	(deref ...)：读取原子的值
	(reset! ...)：修改原子的值
	(swap! atom fun additional-args...)：调用(fun (deref atom) additional-args)并且覆盖atom的值
