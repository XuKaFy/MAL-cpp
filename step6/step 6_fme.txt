在第六步中加入一些字符串操作和自引用：

	*注意：这些函数可能和manual的实现差别很大。
	(read)：读入一个lisp串，相当于调用了Reader::read(...)
	(print)：输出一个lisp串，相当于调用了Printer::print(...)
	(read-string)：读入一行字符串
	(print-string ...)：输出字符串，会转义（对应manual里的prn）
	(join-string ...)：返回直接拼接的字符串
	(translate-from-string ...)：将字符串翻译为lisp串
	(translate-to-string ...)：将lisp串翻译为字符串
	(read-file ...)：读入整个文件字符串
	(write-file ...)：将一个lisp串输出到文件

	(eval ...)：执行一个lisp串，相当于调用了Evaluator::eval(...)
	(apply fun ...)：将值代入fun中执行

	以下将会延缓实现
	(apply-self ...)：用于在匿名函数中调用自身

		如何实现apply-self呢？我们认为自身表示最靠近内层的非buildin的lambda函数。比如说：

		((lambda (x all) (if (empty? x) all (apply-self (cdr x) (+ all (car x))))) (list 1 2 3 4 5) 0)

		这里的(apply-self ...)就是指代该lambda本身。

	这里是和并发相关的部分，延缓实现
	(atom ...)：创建一个原子
	(atom? ...)：是否是原子
	(deref ...)：读取原子的值
	(reset! ...)：修改原子的值
	(swap! atom fun additional-args...)：调用(fun (deref atom) additional-args)并且覆盖atom的值

注：因为之前看manual没有图片，所以忽略了Core的实现。现在实现。